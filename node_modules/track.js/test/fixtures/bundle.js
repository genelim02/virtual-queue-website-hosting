(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require a module
  function rqzt(file, callback) {
    if ({}.hasOwnProperty.call(rqzt.cache, file))
      return rqzt.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      rqzt.load(file, callback);
      return
    }
    var resolved = rqzt.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      rqzt: rqzt,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    rqzt.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return rqzt.cache[file] = module$.exports
  }
  rqzt.modules = {};
  rqzt.cache = {};
  rqzt.resolve = function (file) {
    return {}.hasOwnProperty.call(rqzt.modules, file) ? rqzt.modules[file] : void 0
  };
  // Define normal static module
  rqzt.define = function (file, fn) {
    rqzt.modules[file] = fn
  };
  // source: src/analytics.coffee
  rqzt.define('./analytics', function (module, exports, __dirname, __filename, process) {
    var Analytics, Integration, methodName, normalizeCall, page, slice = [].slice;
    Integration = rqzt('./integration');
    page = rqzt('./page');
    methodName = function (event) {
      var name;
      name = event.replace(/\s+/g, '');
      return name[0].toLowerCase() + name.substring(1)
    };
    normalizeCall = function (props, cb) {
      var ref;
      if (props == null) {
        props = {}
      }
      if (cb == null) {
        cb = function () {
        }
      }
      if (typeof props === 'function') {
        ref = [
          {},
          cb
        ], props = ref[0], cb = ref[1]
      }
      return [
        props,
        cb
      ]
    };
    module.exports = Analytics = function () {
      function Analytics() {
        var _this;
        this.integrations = [];
        if (typeof location !== 'undefined') {
          this._debug = location.search.indexOf('v=1') !== -1
        }
        _this = this;
        Integration.prototype.log = function () {
          var args;
          args = Array.prototype.slice.call(arguments);
          args.unshift(this.name());
          return _this.log.apply(_this, args)
        }
      }
      Analytics.prototype.debug = function (bool) {
        if (bool == null) {
          bool = true
        }
        return this._debug = bool
      };
      Analytics.prototype.log = function () {
        if (this._debug) {
          return typeof console !== 'undefined' && console !== null ? console.log.apply(console, arguments) : void 0
        }
      };
      Analytics.prototype.ready = function (cb) {
        if (cb == null) {
          cb = function () {
          }
        }
        this.log('ready');
        return cb()
      };
      Analytics.prototype.initialize = function (arg) {
        var fn, i, integrations, len, opts, ref;
        integrations = (ref = arg.integrations) != null ? ref : [];
        this.log('initialize', integrations);
        fn = function (_this) {
          return function (opts) {
            var Constructor, int;
            Constructor = require('./integrations/' + opts.type);
            int = new Constructor(opts);
            if (int.sample()) {
              int.init();
              int.load();
              return _this.integrations.push(int)
            } else {
              return _this.log('not sampling', int.name())
            }
          }
        }(this);
        for (i = 0, len = integrations.length; i < len; i++) {
          opts = integrations[i];
          fn(opts)
        }
        this.referrer()
      };
      Analytics.prototype.referrer = function () {
        return page.referrer()
      };
      Analytics.prototype.identity = function () {
        return rqzt('./identity')
      };
      Analytics.prototype.call = function () {
        var args, event, i, int, len, method, ref, ref1, ref2;
        event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        this.log.apply(this, [
          'call',
          event
        ].concat(slice.call(args)));
        method = methodName(event);
        ref = this.integrations;
        for (i = 0, len = ref.length; i < len; i++) {
          int = ref[i];
          if (int[method] != null) {
            int.log.apply(int, [method].concat(slice.call(args)));
            (ref1 = int[method]).call.apply(ref1, [int].concat(slice.call(args)))
          } else {
            if (int.track != null) {
              int.log.apply(int, [
                'track',
                event
              ].concat(slice.call(args)));
              (ref2 = int.track).call.apply(ref2, [
                int,
                event
              ].concat(slice.call(args)))
            }
          }
        }
      };
      Analytics.prototype.identify = function (userId, props, cb) {
        var ref;
        ref = normalizeCall(props, cb), props = ref[0], cb = ref[1];
        if (props.userId == null) {
          props.userId = userId
        }
        this.log('identify', props);
        this.call('identify', userId, props, cb)
      };
      Analytics.prototype.track = function (event, props, cb) {
        var ref;
        ref = normalizeCall(props, cb), props = ref[0], cb = ref[1];
        this.log('track', event, props);
        this.call('track', event, props, cb)
      };
      Analytics.prototype.page = function (category, name, props, cb) {
        var ref;
        ref = normalizeCall(props, cb), props = ref[0], cb = ref[1];
        if (typeof category === 'string') {
          props.category = category
        }
        if (typeof name === 'string') {
          props.name = name
        }
        this.log('page', props);
        this.call('page', category, name, props, cb)
      };
      Analytics.prototype.alias = function () {
      };
      Analytics.prototype.group = function () {
      };
      Analytics.prototype.load = function () {
      };
      Analytics.prototype.off = function () {
      };
      Analytics.prototype.on = function () {
      };
      Analytics.prototype.once = function () {
      };
      Analytics.prototype.reset = function () {
      };
      Analytics.prototype.trackClick = function () {
      };
      Analytics.prototype.trackForm = function () {
      };
      Analytics.prototype.trackLink = function () {
      };
      Analytics.prototype.trackSubmit = function () {
      };
      Analytics.prototype.user = function () {
      };
      return Analytics
    }()
  });
  // source: src/integration.coffee
  rqzt.define('./integration', function (module, exports, __dirname, __filename, process) {
    var Integration, loadIframe, loadImg, loadScript, sample;
    loadIframe = rqzt('./loaders/iframe');
    loadImg = rqzt('./loaders/img');
    loadScript = rqzt('./loaders/script');
    sample = rqzt('./sample');
    module.exports = Integration = function () {
      function Integration() {
      }
      Integration.prototype.init = function () {
      };
      Integration.prototype.name = function () {
        return this.opts.type
      };
      Integration.prototype.sample = function () {
        if (this.opts.sample != null) {
          return sample(this.name(), this.opts.sample)
        }
        return true
      };
      Integration.prototype.load = function (cb) {
        if (cb == null) {
          cb = function () {
          }
        }
        if (!(this.src != null && this.src.type != null && this.src.url != null)) {
          return
        }
        this.log('load', this.src);
        switch (this.src.type) {
        case 'script':
          switch (typeof this.src.url) {
          case 'object':
            if (window.location.protocol === 'https:') {
              this.src.url = this.src.url.https
            } else {
              this.src.url = this.src.url.http
            }
            break;
          case 'function':
            this.src.url = this.src.url.call(this)
          }
          return loadScript(this.src, cb);
        case 'img':
          return loadImg(this.src, cb);
        case 'iframe':
          return loadIframe(this.src, cb)
        }
      };
      return Integration
    }()
  });
  // source: src/loaders/iframe.coffee
  rqzt.define('./loaders/iframe', function (module, exports, __dirname, __filename, process) {
    var onload;
    onload = rqzt('./utils').onload;
    module.exports = function (opts, cb) {
      var first, iframe;
      iframe = document.createElement('iframe');
      onload(iframe, cb);
      iframe.width = 1;
      iframe.height = 1;
      iframe.style.display = 'none';
      iframe.src = opts.url;
      first = document.getElementsByTagName('script')[0];
      first.parentNode.insertBefore(iframe, first);
      return iframe
    }
  });
  // source: src/utils.coffee
  rqzt.define('./utils', function (module, exports, __dirname, __filename, process) {
    exports.onload = function (el, cb) {
      var add, attach;
      add = function (el, cb) {
        el.addEventListener('load', function (_, e) {
          return cb(null, e)
        }, false);
        return el.addEventListener('error', function (e) {
          var err;
          err = new Error("failed to load the script '" + el.src + "'");
          err.event = e;
          return cb(err)
        }, false)
      };
      attach = function (el, cb) {
        el.attachEvent('onreadystatechange', function (e) {
          if (!/complete|loaded/.test(el.readyState)) {
            return
          }
          return cb(null, e)
        });
        return el.attachEvent('onerror', function (e) {
          var err;
          err = new Error("failed to load the script '" + el.src + "'");
          err.event = e || window.event;
          return cb(err)
        })
      };
      if (el.addEventListener) {
        return add(el, cb)
      } else {
        return attach(el, cb)
      }
    };
    exports.tld = function (domain) {
      var match;
      match = domain.match(/[^.\s\/]+\.([a-z]{3,}|[a-z]{2}.[a-z]{2})$/);
      if (match != null) {
        return match[0]
      } else {
        return domain
      }
    };
    exports.safariPrivateBrowsing = function () {
      try {
        localStorage.t = 0;
        return false
      } catch (error) {
        return true
      }
    };
    exports.uuid = function () {
      var i, j, lut;
      lut = [];
      for (i = j = 0; j < 256; i = ++j) {
        lut[i] = (i < 16 ? '0' : '') + i.toString(16)
      }
      return function () {
        var d0, d1, d2, d3;
        d0 = Math.random() * 4294967295 | 0;
        d1 = Math.random() * 4294967295 | 0;
        d2 = Math.random() * 4294967295 | 0;
        d3 = Math.random() * 4294967295 | 0;
        return lut[d0 & 255] + lut[d0 >> 8 & 255] + lut[d0 >> 16 & 255] + lut[d0 >> 24 & 255] + '-' + lut[d1 & 255] + lut[d1 >> 8 & 255] + '-' + lut[d1 >> 16 & 15 | 64] + lut[d1 >> 24 & 255] + '-' + lut[d2 & 63 | 128] + lut[d2 >> 8 & 255] + '-' + lut[d2 >> 16 & 255] + lut[d2 >> 24 & 255] + lut[d3 & 255] + lut[d3 >> 8 & 255] + lut[d3 >> 16 & 255] + lut[d3 >> 24 & 255]
      }()
    }
  });
  // source: src/loaders/img.coffee
  rqzt.define('./loaders/img', function (module, exports, __dirname, __filename, process) {
    var onload;
    onload = rqzt('./utils').onload;
    module.exports = function (opts, cb) {
      var img;
      img = new Image;
      onload(img, cb);
      img.width = 1;
      img.height = 1;
      img.src = opts.url;
      return img
    }
  });
  // source: src/loaders/script.coffee
  rqzt.define('./loaders/script', function (module, exports, __dirname, __filename, process) {
    var onload;
    onload = rqzt('./utils').onload;
    module.exports = function (opts, cb) {
      var head, k, ref, ref1, script, v;
      script = document.createElement('script');
      onload(script, cb);
      script.async = (ref = opts.async) != null ? ref : 1;
      script.src = opts.url;
      if (opts.attrs != null) {
        ref1 = opts.attrs;
        for (k in ref1) {
          v = ref1[k];
          script.setAttribute(k, v)
        }
      }
      if (opts.text != null) {
        script.text = '' + opts.text
      }
      head = document.head || document.getElementsByTagName('head')[0];
      head.parentNode.insertBefore(script, head);
      return script
    }
  });
  // source: src/sample.coffee
  rqzt.define('./sample', function (module, exports, __dirname, __filename, process) {
    var session;
    session = rqzt('./session');
    module.exports = function (name, pct) {
      var key, sampled;
      if (pct == null) {
        pct = 1
      }
      key = 'sample:' + name;
      if ((sampled = session.get(key)) != null) {
        return sampled
      }
      if (Math.random() < pct) {
        session.set(key, false);
        return false
      } else {
        session.set(key, true);
        return true
      }
    }
  });
  // source: src/session.coffee
  rqzt.define('./session', function (module, exports, __dirname, __filename, process) {
    var cookies, document, localStorage, ref, ref1, safariPrivateBrowsing, tld, window;
    ref = rqzt('./utils'), safariPrivateBrowsing = ref.safariPrivateBrowsing, tld = ref.tld;
    ref1 = rqzt('./browser'), document = ref1.document, window = ref1.window;
    localStorage = function () {
      return rqzt('store/store')
    };
    cookies = function () {
      var domain, key, state;
      cookies = rqzt('cookies-js/dist/cookies')(window);
      domain = tld(document.domain);
      key = '_hza';
      state = function () {
        var value;
        value = cookies.get(key);
        if (value != null) {
          return JSON.parse(value)
        } else {
          return {}
        }
      };
      return {
        get: function (k) {
          return state()[k]
        },
        set: function (k, v) {
          var s;
          s = state();
          s[k] = v;
          return cookies.set(key, JSON.stringify(s, {
            domain: domain,
            secure: true,
            expires: 1e+400
          }))
        },
        remove: function (k) {
          return this.set(k, void 0)
        },
        clear: function () {
          return cookies.expire(key)
        }
      }
    };
    module.exports = safariPrivateBrowsing() ? cookies() : localStorage()
  });
  // source: src/browser.coffee
  rqzt.define('./browser', function (module, exports, __dirname, __filename, process) {
    var document, window;
    if (typeof window === 'undefined' || window === null) {
      document = rqzt('jsdom').jsdom();
      document.domain = 'localhost';
      window = document.defaultView
    }
    module.exports = {
      window: window,
      document: document
    }
  });
  // source: node_modules/store/store.js
  rqzt.define('store/store', function (module, exports, __dirname, __filename, process) {
    'use strict'  // Module export pattern from
                  // https://github.com/umdjs/umd/blob/master/returnExports.js
;
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory)
      } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory()
      } else {
        // Browser globals (root is window)
        root.store = factory()
      }
    }(this, function () {
      // Store.js
      var store = {}, win = typeof window != 'undefined' ? window : global, doc = win.document, localStorageName = 'localStorage', scriptTag = 'script', storage;
      store.disabled = false;
      store.version = '1.3.20';
      store.set = function (key, value) {
      };
      store.get = function (key, defaultVal) {
      };
      store.has = function (key) {
        return store.get(key) !== undefined
      };
      store.remove = function (key) {
      };
      store.clear = function () {
      };
      store.transact = function (key, defaultVal, transactionFn) {
        if (transactionFn == null) {
          transactionFn = defaultVal;
          defaultVal = null
        }
        if (defaultVal == null) {
          defaultVal = {}
        }
        var val = store.get(key, defaultVal);
        transactionFn(val);
        store.set(key, val)
      };
      store.getAll = function () {
      };
      store.forEach = function () {
      };
      store.serialize = function (value) {
        return JSON.stringify(value)
      };
      store.deserialize = function (value) {
        if (typeof value != 'string') {
          return undefined
        }
        try {
          return JSON.parse(value)
        } catch (e) {
          return value || undefined
        }
      };
      // Functions to encapsulate questionable FireFox 3.6.13 behavior
      // when about.config::dom.storage.enabled === false
      // See https://github.com/marcuswestin/store.js/issues#issue/13
      function isLocalStorageNameSupported() {
        try {
          return localStorageName in win && win[localStorageName]
        } catch (err) {
          return false
        }
      }
      if (isLocalStorageNameSupported()) {
        storage = win[localStorageName];
        store.set = function (key, val) {
          if (val === undefined) {
            return store.remove(key)
          }
          storage.setItem(key, store.serialize(val));
          return val
        };
        store.get = function (key, defaultVal) {
          var val = store.deserialize(storage.getItem(key));
          return val === undefined ? defaultVal : val
        };
        store.remove = function (key) {
          storage.removeItem(key)
        };
        store.clear = function () {
          storage.clear()
        };
        store.getAll = function () {
          var ret = {};
          store.forEach(function (key, val) {
            ret[key] = val
          });
          return ret
        };
        store.forEach = function (callback) {
          for (var i = 0; i < storage.length; i++) {
            var key = storage.key(i);
            callback(key, store.get(key))
          }
        }
      } else if (doc && doc.documentElement.addBehavior) {
        var storageOwner, storageContainer;
        // Since #userData storage applies only to specific paths, we need to
        // somehow link our data to a specific path.  We choose /favicon.ico
        // as a pretty safe option, since all browsers already make a request to
        // this URL anyway and being a 404 will not hurt us here.  We wrap an
        // iframe pointing to the favicon in an ActiveXObject(htmlfile) object
        // (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
        // since the iframe access rules appear to allow direct access and
        // manipulation of the document element, even for a 404 page.  This
        // document can be used instead of the current document (which would
        // have been limited to the current path) to perform #userData storage.
        try {
          storageContainer = new ActiveXObject('htmlfile');
          storageContainer.open();
          storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
          storageContainer.close();
          storageOwner = storageContainer.w.frames[0].document;
          storage = storageOwner.createElement('div')
        } catch (e) {
          // somehow ActiveXObject instantiation failed (perhaps some special
          // security settings or otherwse), fall back to per-path storage
          storage = doc.createElement('div');
          storageOwner = doc.body
        }
        var withIEStorage = function (storeFunction) {
          return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(storage);
            // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
            // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
            storageOwner.appendChild(storage);
            storage.addBehavior('#default#userData');
            storage.load(localStorageName);
            var result = storeFunction.apply(store, args);
            storageOwner.removeChild(storage);
            return result
          }
        };
        // In IE7, keys cannot start with a digit or contain certain chars.
        // See https://github.com/marcuswestin/store.js/issues/40
        // See https://github.com/marcuswestin/store.js/issues/83
        var forbiddenCharsRegex = new RegExp('[!"#$%&\'()*+,/\\\\:;<=>?@[\\]^`{|}~]', 'g');
        var ieKeyFix = function (key) {
          return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
        };
        store.set = withIEStorage(function (storage, key, val) {
          key = ieKeyFix(key);
          if (val === undefined) {
            return store.remove(key)
          }
          storage.setAttribute(key, store.serialize(val));
          storage.save(localStorageName);
          return val
        });
        store.get = withIEStorage(function (storage, key, defaultVal) {
          key = ieKeyFix(key);
          var val = store.deserialize(storage.getAttribute(key));
          return val === undefined ? defaultVal : val
        });
        store.remove = withIEStorage(function (storage, key) {
          key = ieKeyFix(key);
          storage.removeAttribute(key);
          storage.save(localStorageName)
        });
        store.clear = withIEStorage(function (storage) {
          var attributes = storage.XMLDocument.documentElement.attributes;
          storage.load(localStorageName);
          for (var i = attributes.length - 1; i >= 0; i--) {
            storage.removeAttribute(attributes[i].name)
          }
          storage.save(localStorageName)
        });
        store.getAll = function (storage) {
          var ret = {};
          store.forEach(function (key, val) {
            ret[key] = val
          });
          return ret
        };
        store.forEach = withIEStorage(function (storage, callback) {
          var attributes = storage.XMLDocument.documentElement.attributes;
          for (var i = 0, attr; attr = attributes[i]; ++i) {
            callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
          }
        })
      }
      try {
        var testKey = '__storejs__';
        store.set(testKey, testKey);
        if (store.get(testKey) != testKey) {
          store.disabled = true
        }
        store.remove(testKey)
      } catch (e) {
        store.disabled = true
      }
      store.enabled = !store.disabled;
      return store
    }))
  });
  // source: node_modules/cookies-js/dist/cookies.js
  rqzt.define('cookies-js/dist/cookies', function (module, exports, __dirname, __filename, process) {
    /*
 * Cookies.js - 1.2.2
 * https://github.com/ScottHamper/Cookies
 *
 * This is free and unencumbered software released into the public domain.
 */
    (function (global, undefined) {
      'use strict';
      var factory = function (window) {
        if (typeof window.document !== 'object') {
          throw new Error('Cookies.js requires a `window` with a `document` object')
        }
        var Cookies = function (key, value, options) {
          return arguments.length === 1 ? Cookies.get(key) : Cookies.set(key, value, options)
        };
        // Allows for setter injection in unit tests
        Cookies._document = window.document;
        // Used to ensure cookie keys do not collide with
        // built-in `Object` properties
        Cookies._cacheKeyPrefix = 'cookey.';
        // Hurr hurr, :)
        Cookies._maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');
        Cookies.defaults = {
          path: '/',
          secure: false
        };
        Cookies.get = function (key) {
          if (Cookies._cachedDocumentCookie !== Cookies._document.cookie) {
            Cookies._renewCache()
          }
          var value = Cookies._cache[Cookies._cacheKeyPrefix + key];
          return value === undefined ? undefined : decodeURIComponent(value)
        };
        Cookies.set = function (key, value, options) {
          options = Cookies._getExtendedOptions(options);
          options.expires = Cookies._getExpiresDate(value === undefined ? -1 : options.expires);
          Cookies._document.cookie = Cookies._generateCookieString(key, value, options);
          return Cookies
        };
        Cookies.expire = function (key, options) {
          return Cookies.set(key, undefined, options)
        };
        Cookies._getExtendedOptions = function (options) {
          return {
            path: options && options.path || Cookies.defaults.path,
            domain: options && options.domain || Cookies.defaults.domain,
            expires: options && options.expires || Cookies.defaults.expires,
            secure: options && options.secure !== undefined ? options.secure : Cookies.defaults.secure
          }
        };
        Cookies._isValidDate = function (date) {
          return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime())
        };
        Cookies._getExpiresDate = function (expires, now) {
          now = now || new Date;
          if (typeof expires === 'number') {
            expires = expires === Infinity ? Cookies._maxExpireDate : new Date(now.getTime() + expires * 1000)
          } else if (typeof expires === 'string') {
            expires = new Date(expires)
          }
          if (expires && !Cookies._isValidDate(expires)) {
            throw new Error('`expires` parameter cannot be converted to a valid Date instance')
          }
          return expires
        };
        Cookies._generateCookieString = function (key, value, options) {
          key = key.replace(/[^#$&+\^`|]/g, encodeURIComponent);
          key = key.replace(/\(/g, '%28').replace(/\)/g, '%29');
          value = (value + '').replace(/[^!#$&-+\--:<-\[\]-~]/g, encodeURIComponent);
          options = options || {};
          var cookieString = key + '=' + value;
          cookieString += options.path ? ';path=' + options.path : '';
          cookieString += options.domain ? ';domain=' + options.domain : '';
          cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';
          cookieString += options.secure ? ';secure' : '';
          return cookieString
        };
        Cookies._getCacheFromString = function (documentCookie) {
          var cookieCache = {};
          var cookiesArray = documentCookie ? documentCookie.split('; ') : [];
          for (var i = 0; i < cookiesArray.length; i++) {
            var cookieKvp = Cookies._getKeyValuePairFromCookieString(cookiesArray[i]);
            if (cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] === undefined) {
              cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] = cookieKvp.value
            }
          }
          return cookieCache
        };
        Cookies._getKeyValuePairFromCookieString = function (cookieString) {
          // "=" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`
          var separatorIndex = cookieString.indexOf('=');
          // IE omits the "=" when the cookie value is an empty string
          separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;
          var key = cookieString.substr(0, separatorIndex);
          var decodedKey;
          try {
            decodedKey = decodeURIComponent(key)
          } catch (e) {
            if (console && typeof console.error === 'function') {
              console.error('Could not decode cookie with key "' + key + '"', e)
            }
          }
          return {
            key: decodedKey,
            value: cookieString.substr(separatorIndex + 1)  // Defer decoding value until accessed
          }
        };
        Cookies._renewCache = function () {
          Cookies._cache = Cookies._getCacheFromString(Cookies._document.cookie);
          Cookies._cachedDocumentCookie = Cookies._document.cookie
        };
        Cookies._areEnabled = function () {
          var testKey = 'cookies.js';
          var areEnabled = Cookies.set(testKey, 1).get(testKey) === '1';
          Cookies.expire(testKey);
          return areEnabled
        };
        Cookies.enabled = Cookies._areEnabled();
        return Cookies
      };
      var cookiesExport = typeof global.document === 'object' ? factory(global) : factory;
      // AMD support
      if (typeof define === 'function' && define.amd) {
        define(function () {
          return cookiesExport
        })  // CommonJS/Node.js support
      } else if (typeof exports === 'object') {
        // Support Node.js specific `module.exports` (which can be a function)
        if (typeof module === 'object' && typeof module.exports === 'object') {
          exports = module.exports = cookiesExport
        }
        // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)
        exports.Cookies = cookiesExport
      } else {
        global.Cookies = cookiesExport
      }
    }(typeof window === 'undefined' ? this : window))
  });
  // source: src/page.coffee
  rqzt.define('./page', function (module, exports, __dirname, __filename, process) {
    var session, tld;
    session = rqzt('./session');
    tld = rqzt('./utils').tld;
    module.exports = {
      title: function () {
        return document.title
      },
      referrer: function () {
        var domain, ref, ref1;
        if (this._referrer != null) {
          return this._referrer
        }
        domain = tld(document.domain);
        ref = document.referrer;
        if (ref.indexOf(domain) === -1) {
          session.set('referrer', ref);
          return this._referrer = ref
        } else {
          return this._referrer = (ref1 = session.get('referrer')) != null ? ref1 : ''
        }
      }
    }
  });
  // source: src/identity.coffee
  rqzt.define('./identity', function (module, exports, __dirname, __filename, process) {
    var Identity, session, uuid;
    session = rqzt('./session');
    uuid = rqzt('./utils').uuid;
    Identity = function () {
      function Identity() {
        var k, props, ref, v;
        props = (ref = session.get('identity')) != null ? ref : {};
        for (k in props) {
          v = props[k];
          this[k] = v
        }
        if (!(this.userId != null || this.anonId != null)) {
          this.anonId = uuid()
        }
      }
      Identity.prototype.set = function (k, v) {
        var traits;
        traits = identity();
        traits[k] = v;
        return session.set('identity', traits)
      };
      Identity.prototype.clear = function () {
        return session.remove('identity')
      };
      Identity.prototype.id = function () {
        var ref;
        return (ref = this.userId) != null ? ref : this.anonId
      };
      return Identity
    }();
    module.exports = new Identity
  });
  // source: src/integrations/index.coffee
  rqzt.define('./integrations', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Custom: rqzt('./integrations/custom'),
      FacebookPixel: rqzt('./integrations/facebook-pixel'),
      FacebookConversions: rqzt('./integrations/facebook-conversions'),
      GoogleAdWords: rqzt('./integrations/google-adwords'),
      GoogleAnalytics: rqzt('./integrations/google-analytics')
    }
  });
  // source: src/integrations/custom.coffee
  rqzt.define('./integrations/custom', function (module, exports, __dirname, __filename, process) {
    var Custom, Integration, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Integration = rqzt('./integration');
    module.exports = Custom = function (superClass) {
      extend(Custom, superClass);
      function Custom(opts) {
        this.opts = opts;
        if (this.src == null) {
          this.src = this.opts.src
        }
        this.fn = new Function(this.opts.code)
      }
      Custom.prototype.track = function (event, props, cb) {
        var err;
        if (event !== this.opts.event) {
          return
        }
        try {
          return this.fn(event, props, cb)
        } catch (error) {
          err = error;
          return this.log('Custom integration failed, ' + err.toString())
        }
      };
      return Custom
    }(Integration)
  });
  // source: src/integrations/facebook-pixel.coffee
  rqzt.define('./integrations/facebook-pixel', function (module, exports, __dirname, __filename, process) {
    var FacebookPixel, Integration, cart, parseCurrency, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Integration = rqzt('./integration');
    cart = rqzt('./cart');
    parseCurrency = function (value) {
      if (typeof value === 'string') {
        return value
      } else if (typeof value === 'number') {
        return value.toFixed(2)
      }
    };
    module.exports = FacebookPixel = function (superClass) {
      extend(FacebookPixel, superClass);
      FacebookPixel.prototype.src = {
        type: 'script',
        url: '//connect.facebook.net/en_US/fbevents.js'
      };
      function FacebookPixel(opts) {
        var base, base1, base2, base3, base4, base5;
        this.opts = opts;
        if ((base = this.opts).values == null) {
          base.values = {}
        }
        if ((base1 = this.opts.values).currency == null) {
          base1.currency = 'USD'
        }
        if ((base2 = this.opts.values).viewedProduct == null) {
          base2.viewedProduct = { percent: 0.0001 }
        }
        if ((base3 = this.opts.values).addedProduct == null) {
          base3.addedProduct = { percent: 0.001 }
        }
        if ((base4 = this.opts.values).initiateCheckout == null) {
          base4.initiateCheckout = { percent: 0.01 }
        }
        if ((base5 = this.opts.values).addPaymentInfo == null) {
          base5.addPaymentInfo = { percent: 0.02 }
        }
      }
      FacebookPixel.prototype.init = function () {
        var fbq;
        if (window.fbq != null) {
          return
        }
        fbq = function () {
          if (fbq.callMethod) {
            fbq.callMethod.apply(fbq, arguments)
          } else {
            fbq.queue.push(arguments)
          }
        };
        fbq.push = fbq;
        fbq.loaded = true;
        fbq.version = '2.0';
        fbq.queue = [];
        fbq.agent = 'hza';
        window.fbq = window._fbq = fbq;
        if (this.identity != null) {
          fbq('init', this.opts.id, this.identity)
        } else {
          fbq('init', this.opts.id)
        }
      };
      FacebookPixel.prototype.identify = function (userId, props, cb) {
        this.identity = {
          em: props.email,
          ph: props.phone,
          fn: props.firstName
        };
        return cb(null)
      };
      FacebookPixel.prototype.page = function (category, name, props, cb) {
        return cb(null)
      };
      FacebookPixel.prototype.track = function (event, props, cb) {
        switch (event) {
        case 'Lead':
          fbq('track', 'Lead');
          break;
        case 'Complete Registration':
          fbq('track', 'CompleteRegistration');
          break;
        case 'Search':
          fbq('track', 'Search');
          break;
        case 'Add to Wishlist':
          fbq('track', 'AddToWishList')
        }
        return cb(null)
      };
      FacebookPixel.prototype.calcValue = function (event, props, total) {
        var currency, ref, value;
        if (props == null) {
          props = {}
        }
        if (total == null) {
          total = 0
        }
        total = math.Max(props.total, total);
        currency = (ref = props.currency) != null ? ref : this.opts.values.currency;
        if ((value = props.values[event].value) != null) {
          return [
            value,
            currency
          ]
        }
        value = props.values[event].percent * total;
        return [
          value,
          currency
        ]
      };
      FacebookPixel.prototype.viewedCheckoutStep = function (event, props, cb) {
        var currency, ids, items, ref, ref1, total, value;
        if (props.step != null && props.step > 1) {
          return
        }
        ref = cart(), ids = ref.ids, total = ref.total, items = ref.items;
        ref1 = this.calcValue('initiateCheckout', props, total), value = ref1[0], currency = ref1[1];
        fbq('track', 'InitiateCheckout', {
          content_ids: ids,
          currency: currency,
          num_items: items.length,
          value: value
        });
        return cb(null)
      };
      FacebookPixel.prototype.completedCheckoutStep = function (event, props, cb) {
        var currency, ids, ref, ref1, total, value;
        if (props.step != null && props.step > 1) {
          return
        }
        ref = cart(), ids = ref.ids, total = ref.total;
        ref1 = this.calcValue('addPaymentInfo', props, total), value = ref1[0], currency = ref1[1];
        fbq('track', 'AddPaymentInfo', {
          content_ids: ids,
          currency: currency,
          value: value
        });
        return cb(null)
      };
      FacebookPixel.prototype.viewedProduct = function (event, props, cb) {
        var currency, ref, value;
        ref = this.calcValue('viewedProduct', props, props.price), value = ref[0], currency = ref[1];
        fbq('track', 'ViewContent', {
          content_ids: [props.id],
          content_type: 'product',
          currency: currency,
          value: value
        });
        return cb(null)
      };
      FacebookPixel.prototype.addedProduct = function (event, props, cb) {
        var currency, ref, value;
        ref = this.calcValue('addedProduct', props, props.price), value = ref[0], currency = ref[1];
        fbq('track', 'AddToCart', {
          content_type: 'product',
          content_ids: [props.id]
        });
        return cb(null)
      };
      FacebookPixel.prototype.completedOrder = function (event, props, cb) {
        var ids, product, ref;
        ids = function () {
          var i, len, ref, ref1, results;
          ref = props.products;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            product = ref[i];
            results.push((ref1 = product.sku) != null ? ref1 : product)
          }
          return results
        }();
        fbq('track', 'Purchase', {
          value: parseCurrency(props.total),
          currency: (ref = props.currency) != null ? ref : 'USD',
          content_type: 'product',
          content_ids: ids,
          num_items: ids.length
        });
        return cb(null)
      };
      return FacebookPixel
    }(Integration)
  });
  // source: src/cart.coffee
  rqzt.define('./cart', function (module, exports, __dirname, __filename, process) {
    module.exports = function () {
      var data, i, ids, item, items, len, ref, ref1;
      data = typeof Crowdstart !== 'undefined' && Crowdstart !== null ? (ref = Crowdstart.Shop) != null ? ref.data : void 0 : void 0;
      if (data == null) {
        return {
          total: 0,
          items: [],
          ids: []
        }
      }
      items = data.get('order.items');
      ids = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        ids.push((ref1 = item.sku) != null ? ref1 : item.id)
      }
      return {
        total: data.get('order.total'),
        items: items,
        ids: ids
      }
    }
  });
  // source: src/integrations/facebook-conversions.coffee
  rqzt.define('./integrations/facebook-conversions', function (module, exports, __dirname, __filename, process) {
    var FacebookConversions, Integration, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Integration = rqzt('./integration');
    module.exports = FacebookConversions = function (superClass) {
      extend(FacebookConversions, superClass);
      FacebookConversions.prototype.src = {
        type: 'script',
        url: '//connect.facebook.net/en_US/fbds.js'
      };
      function FacebookConversions(opts) {
        this.opts = opts
      }
      FacebookConversions.prototype.init = function () {
        if (window._fbq != null) {
          return
        }
        return window._fbq = []
      };
      FacebookConversions.prototype.load = function () {
        if (typeof _fbq !== 'undefined' && _fbq !== null ? _fbq.loaded : void 0) {
          return
        }
        FacebookConversions.__super__.load.apply(this, arguments);
        return _fbq.loaded = true
      };
      FacebookConversions.prototype.page = function (category, name, props, cb) {
        if (arguments.length === 1) {
          name = category
        }
        return this.track(name, props, cb)
      };
      FacebookConversions.prototype.track = function (event, props, cb) {
        var currency, id, ref, ref1, ref2, ref3, value;
        if (event !== this.opts.event) {
          return
        }
        id = this.opts.id;
        value = (ref = (ref1 = props.value) != null ? ref1 : this.opts.value) != null ? ref : '0.00';
        currency = (ref2 = (ref3 = props.currency) != null ? ref3 : this.opts.currency) != null ? ref2 : 'USD';
        return _fbq.push([
          'track',
          id,
          {
            value: value,
            currency: currency
          }
        ])
      };
      return FacebookConversions
    }(Integration)
  });
  // source: src/integrations/google-adwords.coffee
  rqzt.define('./integrations/google-adwords', function (module, exports, __dirname, __filename, process) {
    var GoogleAdWords, Integration, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Integration = rqzt('./integration');
    module.exports = GoogleAdWords = function (superClass) {
      extend(GoogleAdWords, superClass);
      GoogleAdWords.prototype.src = {
        type: 'script',
        url: '//www.googleadservices.com/pagead/conversion_async.js'
      };
      function GoogleAdWords(opts) {
        this.opts = opts;
        this.queue = []
      }
      GoogleAdWords.prototype.init = function () {
        if (window.google_trackConversion != null) {
          return
        }
        return window.google_trackConversion = function (_this) {
          return function (event) {
            return _this.queue.push(event)
          }
        }(this)
      };
      GoogleAdWords.prototype.load = function (cb) {
        return GoogleAdWords.__super__.load.call(this, function (_this) {
          return function () {
            var event, i, len, ref;
            if (_this.queue.length) {
              ref = _this.queue;
              for (i = 0, len = ref.length; i < len; i++) {
                event = ref[i];
                google_trackConversion(event)
              }
            }
            return cb(null)
          }
        }(this))
      };
      GoogleAdWords.prototype.page = function (category, name, props, cb) {
        if (arguments.length === 1) {
          name = category
        }
        if (name !== this.opts.event) {
          return
        }
        google_trackConversion({
          google_conversion_id: this.opts.id,
          google_custom_params: props,
          google_remarketing_only: true
        });
        return cb(null)
      };
      GoogleAdWords.prototype.track = function (event, props, cb) {
        if (event !== this.opts.event) {
          return
        }
        google_trackConversion({
          google_conversion_id: this.opts.id,
          google_custom_params: props,
          google_conversion_language: 'en',
          google_conversion_format: '3',
          google_conversion_color: 'ffffff',
          google_conversion_label: event,
          google_conversion_value: props.total,
          google_remarketing_only: false
        });
        return cb(null)
      };
      return GoogleAdWords
    }(Integration)
  });
  // source: src/integrations/google-analytics.coffee
  rqzt.define('./integrations/google-analytics', function (module, exports, __dirname, __filename, process) {
    var GoogleAnalytics, Integration, parseCurrency, parseValue, payload, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Integration = rqzt('./integration');
    parseValue = function (value) {
      if (typeof value === 'string') {
        if (value.indexOf('.') !== -1) {
          value = Math.round(parseFloat(value, 10))
        } else {
          value = parseInt(value, 10)
        }
      }
      return value
    };
    parseCurrency = function (value) {
      if (typeof value === 'string') {
        return value
      } else if (typeof value === 'number') {
        return value.toFixed(2)
      }
    };
    payload = function (props) {
      var data, k, v;
      if (props == null) {
        props = {}
      }
      data = {};
      for (k in props) {
        v = props[k];
        if (v != null) {
          data[k] = v
        }
      }
      return data
    };
    module.exports = GoogleAnalytics = function (superClass) {
      extend(GoogleAnalytics, superClass);
      GoogleAnalytics.prototype.src = {
        type: 'script',
        url: '//www.google-analytics.com/analytics.js'
      };
      function GoogleAnalytics(opts) {
        this.opts = opts
      }
      GoogleAnalytics.prototype.init = function () {
        (function (i, s, o, g, r, a, m) {
          i['GoogleAnalyticsObject'] = r;
          i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
          };
          return i[r].l = 1 * new Date
        }(window, document, '', '', 'ga'));
        window.GoogleAnalyticsObject = 'ga';
        ga('create', this.opts.id, 'auto');
        return this.loadLinkAttribution()
      };
      GoogleAnalytics.prototype.setAction = function (action, props) {
        return ga('ec:setAction', action, payload(props))
      };
      GoogleAnalytics.prototype.sendEvent = function (event, props) {
        var campaign, data, ref, ref1, ref2;
        data = { eventAction: event };
        if (props != null) {
          data.eventCategory = props.category;
          data.eventLabel = props.label;
          data.eventValue = parseValue((ref = (ref1 = (ref2 = props.value) != null ? ref2 : props.total) != null ? ref1 : props.revenue) != null ? ref : 0);
          data.nonInteraction = props.nonInteraction;
          if ((campaign = props.campaign) != null) {
            data.campaignName = campaign.name;
            data.campaignSource = campaign.source;
            data.campaignMedium = campaign.medium;
            data.campaignContent = campaign.content;
            data.campaignKeyword = campaign.term
          }
        }
        return ga('send', 'event', payload(data))
      };
      GoogleAnalytics.prototype.sendEEvent = function (event, props) {
        this.loadEcommerce(event, props);
        if (props.category == null) {
          props.category = 'EnhancedEcommerce'
        }
        return this.sendEvent(event, props)
      };
      GoogleAnalytics.prototype.identify = function (userId, props, cb) {
        ga('set', 'userId', userId);
        return cb(null)
      };
      GoogleAnalytics.prototype.page = function (category, name, props, cb) {
        ga('set', payload(props));
        ga('send', 'pageview', payload(props));
        return cb(null)
      };
      GoogleAnalytics.prototype.track = function (event, props, cb) {
        this.sendEvent(event, props);
        return cb(null)
      };
      GoogleAnalytics.prototype.loadLinkAttribution = function () {
        if (this.opts.linkAttribution == null) {
          return
        }
        if (!this._loadedLinkAttribution) {
          ga('require', 'linkid', this.opts.linkAttribution);
          return this._loadedLinkAttribution = true
        }
      };
      GoogleAnalytics.prototype.loadEcommerce = function (props) {
        var ref;
        if (props == null) {
          props = {}
        }
        if (!this._loadedEcommerce) {
          ga('require', 'ec');
          this._loadedEcommerce = true
        }
        return ga('set', '&cu', (ref = props.currency) != null ? ref : 'USD')
      };
      GoogleAnalytics.prototype.addProduct = function (props) {
        var ref;
        return ga('ec:addProduct', payload({
          id: (ref = props.sku) != null ? ref : props.id,
          brand: props.brand,
          category: props.category,
          coupon: props.coupon,
          currency: props.currency,
          name: props.name,
          price: parseCurrency(props.price),
          quantity: props.quantity,
          variant: props.variant
        }))
      };
      GoogleAnalytics.prototype.viewedProduct = function (event, props, cb) {
        this.sendEEvent(event, props);
        this.addProduct(props);
        this.setAction('detail', props);
        return cb(null)
      };
      GoogleAnalytics.prototype.addedProduct = function (event, props, cb) {
        this.sendEEvent(event, props);
        this.addProduct(props);
        this.setAction('add', props);
        return cb(null)
      };
      GoogleAnalytics.prototype.removedProduct = function (event, props, cb) {
        this.sendEEvent(event, props);
        this.addProduct(props);
        this.setAction('remove', props);
        return cb(null)
      };
      GoogleAnalytics.prototype.completedOrder = function (event, props, cb) {
        var j, len, product, ref, ref1;
        if (!(props.orderId != null && props.products != null)) {
          return
        }
        this.sendEEvent(event, props);
        ref = props.products;
        for (j = 0, len = ref.length; j < len; j++) {
          product = ref[j];
          this.addProduct(product)
        }
        this.setAction('purchase', {
          id: props.orderId,
          affiliation: props.affiliation,
          revenue: parseCurrency((ref1 = props.total) != null ? ref1 : props.revenue),
          tax: parseCurrency(props.tax),
          shipping: parseCurrency(props.shipping),
          coupon: props.coupon
        });
        return cb(null)
      };
      GoogleAnalytics.prototype.viewedCheckoutStep = function (event, props, cb) {
        var ref;
        this.sendEEvent(event, props);
        this.setAction('checkout', {
          step: (ref = props.step) != null ? ref : 1,
          option: props.option
        });
        return cb(null)
      };
      GoogleAnalytics.prototype.completedCheckoutStep = function (event, props, cb) {
        var ref;
        this.sendEEvent(event, props);
        this.setAction('checkout_option', {
          step: (ref = props.step) != null ? ref : 1,
          option: props.option
        });
        return cb(null)
      };
      return GoogleAnalytics
    }(Integration)
  });
  // source: src/index.coffee
  rqzt.define('./index', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Analytics: rqzt('./analytics'),
      Integration: rqzt('./integration'),
      Integrations: rqzt('./integrations')
    }
  });
  rqzt('./index')
}.call(this, this))//# sourceMappingURL=data:application/json;base64,