// Generated by CoffeeScript 1.11.1
var Analytics, Integration, methodName, normalizeCall, page,
  slice = [].slice;

Integration = require('./integration');

page = require('./page');

methodName = function(event) {
  var name;
  name = event.replace(/\s+/g, '');
  return name[0].toLowerCase() + name.substring(1);
};

normalizeCall = function(props, cb) {
  var ref;
  if (props == null) {
    props = {};
  }
  if (cb == null) {
    cb = function() {};
  }
  if (typeof props === 'function') {
    ref = [{}, cb], props = ref[0], cb = ref[1];
  }
  return [props, cb];
};

module.exports = Analytics = (function() {
  function Analytics() {
    var _this;
    this.integrations = [];
    if (typeof location !== 'undefined') {
      this._debug = location.search.indexOf('v=1') !== -1;
    }
    _this = this;
    Integration.prototype.log = function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      args.unshift(this.name());
      return _this.log.apply(_this, args);
    };
  }

  Analytics.prototype.debug = function(bool) {
    if (bool == null) {
      bool = true;
    }
    return this._debug = bool;
  };

  Analytics.prototype.log = function() {
    if (this._debug) {
      return typeof console !== "undefined" && console !== null ? console.log.apply(console, arguments) : void 0;
    }
  };

  Analytics.prototype.ready = function(cb) {
    if (cb == null) {
      cb = function() {};
    }
    this.log('ready');
    return cb();
  };

  Analytics.prototype.initialize = function(arg) {
    var fn, i, integrations, len, opts, ref;
    integrations = (ref = arg.integrations) != null ? ref : [];
    this.log('initialize', integrations);
    fn = (function(_this) {
      return function(opts) {
        var Constructor, int;
        Constructor = require('./integrations/' + opts.type);
        int = new Constructor(opts);
        if (int.sample()) {
          int.init();
          int.load();
          return _this.integrations.push(int);
        } else {
          return _this.log('not sampling', int.name());
        }
      };
    })(this);
    for (i = 0, len = integrations.length; i < len; i++) {
      opts = integrations[i];
      fn(opts);
    }
    this.referrer();
  };

  Analytics.prototype.referrer = function() {
    return page.referrer();
  };

  Analytics.prototype.identity = function() {
    return require('./identity');
  };

  Analytics.prototype.call = function() {
    var args, event, i, int, len, method, ref, ref1, ref2;
    event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    this.log.apply(this, ['call', event].concat(slice.call(args)));
    method = methodName(event);
    ref = this.integrations;
    for (i = 0, len = ref.length; i < len; i++) {
      int = ref[i];
      if (int[method] != null) {
        int.log.apply(int, [method].concat(slice.call(args)));
        (ref1 = int[method]).call.apply(ref1, [int].concat(slice.call(args)));
      } else {
        if (int.track != null) {
          int.log.apply(int, ['track', event].concat(slice.call(args)));
          (ref2 = int.track).call.apply(ref2, [int, event].concat(slice.call(args)));
        }
      }
    }
  };

  Analytics.prototype.identify = function(userId, props, cb) {
    var ref;
    ref = normalizeCall(props, cb), props = ref[0], cb = ref[1];
    if (props.userId == null) {
      props.userId = userId;
    }
    this.log('identify', props);
    this.call('identify', userId, props, cb);
  };

  Analytics.prototype.track = function(event, props, cb) {
    var ref;
    ref = normalizeCall(props, cb), props = ref[0], cb = ref[1];
    this.log('track', event, props);
    this.call('track', event, props, cb);
  };

  Analytics.prototype.page = function(category, name, props, cb) {
    var ref;
    ref = normalizeCall(props, cb), props = ref[0], cb = ref[1];
    if (typeof category === 'string') {
      props.category = category;
    }
    if (typeof name === 'string') {
      props.name = name;
    }
    this.log('page', props);
    this.call('page', category, name, props, cb);
  };

  Analytics.prototype.alias = function() {};

  Analytics.prototype.group = function() {};

  Analytics.prototype.load = function() {};

  Analytics.prototype.off = function() {};

  Analytics.prototype.on = function() {};

  Analytics.prototype.once = function() {};

  Analytics.prototype.reset = function() {};

  Analytics.prototype.trackClick = function() {};

  Analytics.prototype.trackForm = function() {};

  Analytics.prototype.trackLink = function() {};

  Analytics.prototype.trackSubmit = function() {};

  Analytics.prototype.user = function() {};

  return Analytics;

})();

//# sourceMappingURL=analytics.js.map
