// Generated by CoffeeScript 1.11.1
var FacebookPixel, Integration, cart, parseCurrency,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Integration = require('../integration');

cart = require('../cart');

parseCurrency = function(value) {
  if (typeof value === 'string') {
    return value;
  } else if (typeof value === 'number') {
    return value.toFixed(2);
  }
};

module.exports = FacebookPixel = (function(superClass) {
  extend(FacebookPixel, superClass);

  FacebookPixel.prototype.src = {
    type: 'script',
    url: '//connect.facebook.net/en_US/fbevents.js'
  };

  function FacebookPixel(opts) {
    var base, base1, base2, base3, base4, base5;
    this.opts = opts;
    if ((base = this.opts).values == null) {
      base.values = {};
    }
    if ((base1 = this.opts.values).currency == null) {
      base1.currency = 'USD';
    }
    if ((base2 = this.opts.values).viewedProduct == null) {
      base2.viewedProduct = {
        percent: 0.0001
      };
    }
    if ((base3 = this.opts.values).addedProduct == null) {
      base3.addedProduct = {
        percent: 0.001
      };
    }
    if ((base4 = this.opts.values).initiateCheckout == null) {
      base4.initiateCheckout = {
        percent: 0.01
      };
    }
    if ((base5 = this.opts.values).addPaymentInfo == null) {
      base5.addPaymentInfo = {
        percent: 0.02
      };
    }
  }

  FacebookPixel.prototype.init = function() {
    var fbq;
    if (window.fbq != null) {
      return;
    }
    fbq = function() {
      if (fbq.callMethod) {
        fbq.callMethod.apply(fbq, arguments);
      } else {
        fbq.queue.push(arguments);
      }
    };
    fbq.push = fbq;
    fbq.loaded = true;
    fbq.version = '2.0';
    fbq.queue = [];
    fbq.agent = 'hza';
    window.fbq = window._fbq = fbq;
    if (this.identity != null) {
      fbq('init', this.opts.id, this.identity);
    } else {
      fbq('init', this.opts.id);
    }
  };

  FacebookPixel.prototype.identify = function(userId, props, cb) {
    this.identity = {
      em: props.email,
      ph: props.phone,
      fn: props.firstName
    };
    return cb(null);
  };

  FacebookPixel.prototype.page = function(category, name, props, cb) {
    return cb(null);
  };

  FacebookPixel.prototype.track = function(event, props, cb) {
    switch (event) {
      case 'Lead':
        fbq('track', 'Lead');
        break;
      case 'Complete Registration':
        fbq('track', 'CompleteRegistration');
        break;
      case 'Search':
        fbq('track', 'Search');
        break;
      case 'Add to Wishlist':
        fbq('track', 'AddToWishList');
    }
    return cb(null);
  };

  FacebookPixel.prototype.calcValue = function(event, props, total) {
    var currency, ref, value;
    if (props == null) {
      props = {};
    }
    if (total == null) {
      total = 0;
    }
    total = math.Max(props.total, total);
    currency = (ref = props.currency) != null ? ref : this.opts.values.currency;
    if ((value = props.values[event].value) != null) {
      return [value, currency];
    }
    value = props.values[event].percent * total;
    return [value, currency];
  };

  FacebookPixel.prototype.viewedCheckoutStep = function(event, props, cb) {
    var currency, ids, items, ref, ref1, total, value;
    if ((props.step != null) && props.step > 1) {
      return;
    }
    ref = cart(), ids = ref.ids, total = ref.total, items = ref.items;
    ref1 = this.calcValue('initiateCheckout', props, total), value = ref1[0], currency = ref1[1];
    fbq('track', 'InitiateCheckout', {
      content_ids: ids,
      currency: currency,
      num_items: items.length,
      value: value
    });
    return cb(null);
  };

  FacebookPixel.prototype.completedCheckoutStep = function(event, props, cb) {
    var currency, ids, ref, ref1, total, value;
    if ((props.step != null) && props.step > 1) {
      return;
    }
    ref = cart(), ids = ref.ids, total = ref.total;
    ref1 = this.calcValue('addPaymentInfo', props, total), value = ref1[0], currency = ref1[1];
    fbq('track', 'AddPaymentInfo', {
      content_ids: ids,
      currency: currency,
      value: value
    });
    return cb(null);
  };

  FacebookPixel.prototype.viewedProduct = function(event, props, cb) {
    var currency, ref, value;
    ref = this.calcValue('viewedProduct', props, props.price), value = ref[0], currency = ref[1];
    fbq('track', 'ViewContent', {
      content_ids: [props.id],
      content_type: 'product',
      currency: currency,
      value: value
    });
    return cb(null);
  };

  FacebookPixel.prototype.addedProduct = function(event, props, cb) {
    var currency, ref, value;
    ref = this.calcValue('addedProduct', props, props.price), value = ref[0], currency = ref[1];
    fbq('track', 'AddToCart', {
      content_type: 'product',
      content_ids: [props.id]
    });
    return cb(null);
  };

  FacebookPixel.prototype.completedOrder = function(event, props, cb) {
    var ids, product, ref;
    ids = (function() {
      var i, len, ref, ref1, results;
      ref = props.products;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        product = ref[i];
        results.push((ref1 = product.sku) != null ? ref1 : product);
      }
      return results;
    })();
    fbq('track', 'Purchase', {
      value: parseCurrency(props.total),
      currency: (ref = props.currency) != null ? ref : 'USD',
      content_type: 'product',
      content_ids: ids,
      num_items: ids.length
    });
    return cb(null);
  };

  return FacebookPixel;

})(Integration);

//# sourceMappingURL=facebook-pixel.js.map
