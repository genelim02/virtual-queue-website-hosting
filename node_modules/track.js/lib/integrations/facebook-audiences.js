// Generated by CoffeeScript 1.10.0
var FacebookAudiences, Integration, parseCurrency,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Integration = require('../integration');

parseCurrency = function(value) {
  if (typeof value === 'string') {
    return value;
  } else if (typeof value === 'number') {
    return value.toFixed(2);
  }
};

module.exports = FacebookAudiences = (function(superClass) {
  extend(FacebookAudiences, superClass);

  FacebookAudiences.prototype.src = {
    type: 'script',
    url: '//connect.facebook.net/en_US/fbevents.js'
  };

  function FacebookAudiences(opts1) {
    this.opts = opts1;
  }

  FacebookAudiences.prototype.init = function() {
    var fbq;
    if (window.fbq != null) {
      return;
    }
    fbq = window.fbq = function() {
      if (fbq.callMethod) {
        fbq.callMethod.apply(fbq, arguments);
      } else {
        fbq.queue.push(arguments);
      }
    };
    if (!window._fbq) {
      window._fbq = fbq;
    }
    fbq.push = fbq;
    fbq.loaded = !0;
    fbq.version = '2.0';
    fbq.queue = [];
    fbq('init', this.opts.id);
    return fbq('track', 'PageView');
  };

  FacebookAudiences.prototype.page = function(category, name, props, opts, cb) {
    if (props == null) {
      props = {};
    }
    if (opts == null) {
      opts = {};
    }
    if (cb == null) {
      cb = function() {};
    }
    this.log('FacebookAudiences.page', arguments);
    fbq('track', 'ViewContent');
    return cb(null);
  };

  FacebookAudiences.prototype.track = function(event, props, opts, cb) {
    if (cb == null) {
      cb = function() {};
    }
    switch (event) {
      case 'Initiate Checkout':
        fbq('track', 'InitiateCheckout');
        break;
      case 'Add Payment Info':
        fbq('track', 'AddPaymentInfo');
        break;
      case 'Lead':
        fbq('track', 'Lead');
        break;
      case 'Complete Registration':
        fbq('track', 'CompleteRegistration');
        break;
      case 'Search':
        fbq('track', 'Search');
        break;
      case 'Add to Wishlist':
        fbq('track', 'AddToWishList');
    }
    return cb(null);
  };

  FacebookAudiences.prototype.viewedProduct = function(event, props, opts, cb) {
    if (cb == null) {
      cb = function() {};
    }
    this.log('FacebookAudiences.viewedProduct', arguments);
    fbq('track', 'ViewContent');
    return cb(null);
  };

  FacebookAudiences.prototype.addedProduct = function(event, props, opts, cb) {
    if (cb == null) {
      cb = function() {};
    }
    this.log('FacebookAudiences.addedProduct', arguments);
    fbq('track', 'AddToCart');
    return cb(null);
  };

  FacebookAudiences.prototype.completedOrder = function(event, props, opts, cb) {
    var ref;
    if (cb == null) {
      cb = function() {};
    }
    this.log('FacebookAudiences.completedOrder', arguments);
    fbq('track', 'Purchase', {
      value: parseCurrency(props.total),
      currency: (ref = props.currency) != null ? ref : 'USD'
    });
    return cb(null);
  };

  return FacebookAudiences;

})(Integration);

//# sourceMappingURL=facebook-audiences.js.map
