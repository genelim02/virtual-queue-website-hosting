// Generated by CoffeeScript 1.11.1
var GoogleAnalytics, Integration, parseCurrency, parseValue, payload,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Integration = require('../integration');

parseValue = function(value) {
  if (typeof value === 'string') {
    if ((value.indexOf('.')) !== -1) {
      value = Math.round(parseFloat(value, 10));
    } else {
      value = parseInt(value, 10);
    }
  }
  return value;
};

parseCurrency = function(value) {
  if (typeof value === 'string') {
    return value;
  } else if (typeof value === 'number') {
    return value.toFixed(2);
  }
};

payload = function(props) {
  var data, k, v;
  if (props == null) {
    props = {};
  }
  data = {};
  for (k in props) {
    v = props[k];
    if (v != null) {
      data[k] = v;
    }
  }
  return data;
};

module.exports = GoogleAnalytics = (function(superClass) {
  extend(GoogleAnalytics, superClass);

  GoogleAnalytics.prototype.src = {
    type: 'script',
    url: '//www.google-analytics.com/analytics.js'
  };

  function GoogleAnalytics(opts) {
    this.opts = opts;
  }

  GoogleAnalytics.prototype.init = function() {
    (function(i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r;
      i[r] = i[r] || function() {
        (i[r].q = i[r].q || []).push(arguments);
      };
      return i[r].l = 1 * new Date;
    })(window, document, '', '', 'ga');
    window.GoogleAnalyticsObject = 'ga';
    ga('create', this.opts.id, 'auto');
    return this.loadLinkAttribution();
  };

  GoogleAnalytics.prototype.setAction = function(action, props) {
    return ga('ec:setAction', action, payload(props));
  };

  GoogleAnalytics.prototype.sendEvent = function(event, props) {
    var campaign, data, ref, ref1, ref2;
    data = {
      eventAction: event
    };
    if (props != null) {
      data.eventCategory = props.category;
      data.eventLabel = props.label;
      data.eventValue = parseValue((ref = (ref1 = (ref2 = props.value) != null ? ref2 : props.total) != null ? ref1 : props.revenue) != null ? ref : 0);
      data.nonInteraction = props.nonInteraction;
      if ((campaign = props.campaign) != null) {
        data.campaignName = campaign.name;
        data.campaignSource = campaign.source;
        data.campaignMedium = campaign.medium;
        data.campaignContent = campaign.content;
        data.campaignKeyword = campaign.term;
      }
    }
    return ga('send', 'event', payload(data));
  };

  GoogleAnalytics.prototype.sendEEvent = function(event, props) {
    this.loadEcommerce(event, props);
    if (props.category == null) {
      props.category = 'EnhancedEcommerce';
    }
    return this.sendEvent(event, props);
  };

  GoogleAnalytics.prototype.identify = function(userId, props, cb) {
    ga('set', 'userId', userId);
    return cb(null);
  };

  GoogleAnalytics.prototype.page = function(category, name, props, cb) {
    ga('set', payload(props));
    ga('send', 'pageview', payload(props));
    return cb(null);
  };

  GoogleAnalytics.prototype.track = function(event, props, cb) {
    this.sendEvent(event, props);
    return cb(null);
  };

  GoogleAnalytics.prototype.loadLinkAttribution = function() {
    if (this.opts.linkAttribution == null) {
      return;
    }
    if (!this._loadedLinkAttribution) {
      ga('require', 'linkid', this.opts.linkAttribution);
      return this._loadedLinkAttribution = true;
    }
  };

  GoogleAnalytics.prototype.loadEcommerce = function(props) {
    var ref;
    if (props == null) {
      props = {};
    }
    if (!this._loadedEcommerce) {
      ga('require', 'ec');
      this._loadedEcommerce = true;
    }
    return ga('set', '&cu', (ref = props.currency) != null ? ref : 'USD');
  };

  GoogleAnalytics.prototype.addProduct = function(props) {
    var ref;
    return ga('ec:addProduct', payload({
      id: (ref = props.sku) != null ? ref : props.id,
      brand: props.brand,
      category: props.category,
      coupon: props.coupon,
      currency: props.currency,
      name: props.name,
      price: parseCurrency(props.price),
      quantity: props.quantity,
      variant: props.variant
    }));
  };

  GoogleAnalytics.prototype.viewedProduct = function(event, props, cb) {
    this.sendEEvent(event, props);
    this.addProduct(props);
    this.setAction('detail', props);
    return cb(null);
  };

  GoogleAnalytics.prototype.addedProduct = function(event, props, cb) {
    this.sendEEvent(event, props);
    this.addProduct(props);
    this.setAction('add', props);
    return cb(null);
  };

  GoogleAnalytics.prototype.removedProduct = function(event, props, cb) {
    this.sendEEvent(event, props);
    this.addProduct(props);
    this.setAction('remove', props);
    return cb(null);
  };

  GoogleAnalytics.prototype.completedOrder = function(event, props, cb) {
    var j, len, product, ref, ref1;
    if (!((props.orderId != null) && (props.products != null))) {
      return;
    }
    this.sendEEvent(event, props);
    ref = props.products;
    for (j = 0, len = ref.length; j < len; j++) {
      product = ref[j];
      this.addProduct(product);
    }
    this.setAction('purchase', {
      id: props.orderId,
      affiliation: props.affiliation,
      revenue: parseCurrency((ref1 = props.total) != null ? ref1 : props.revenue),
      tax: parseCurrency(props.tax),
      shipping: parseCurrency(props.shipping),
      coupon: props.coupon
    });
    return cb(null);
  };

  GoogleAnalytics.prototype.viewedCheckoutStep = function(event, props, cb) {
    var ref;
    this.sendEEvent(event, props);
    this.setAction('checkout', {
      step: (ref = props.step) != null ? ref : 1,
      option: props.option
    });
    return cb(null);
  };

  GoogleAnalytics.prototype.completedCheckoutStep = function(event, props, cb) {
    var ref;
    this.sendEEvent(event, props);
    this.setAction('checkout_option', {
      step: (ref = props.step) != null ? ref : 1,
      option: props.option
    });
    return cb(null);
  };

  return GoogleAnalytics;

})(Integration);

//# sourceMappingURL=google-analytics.js.map
