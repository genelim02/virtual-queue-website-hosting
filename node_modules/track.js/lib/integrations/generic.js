// Generated by CoffeeScript 1.10.0
var Generic, Integration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Integration = require('../integration');

module.exports = Generic = (function(superClass) {
  extend(Generic, superClass);

  function Generic(opts1) {
    this.opts = opts1;
    if (this.src == null) {
      this.src = this.opts.src;
    }
    this.fn = new Function(this.opts.code);
  }

  Generic.prototype.track = function(event, props, opts, cb) {
    var err, error;
    if (cb == null) {
      cb = function() {};
    }
    if (event !== this.opts.event) {
      return;
    }
    try {
      return this.fn(event, props, opts, cb);
    } catch (error) {
      err = error;
      return this.log("Generic integration failed, " + (err.toString()));
    }
  };

  return Generic;

})(Integration);

//# sourceMappingURL=generic.js.map
