// Generated by CoffeeScript 1.11.1
var Heap, Integration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Integration = require('../integration');

module.exports = Heap = (function(superClass) {
  extend(Heap, superClass);

  Heap.prototype.src = {
    type: 'script',
    url: function() {
      return "//cdn.heapanalytics.com/js/heap-" + this.id + ".js";
    }
  };

  function Heap(opts) {
    this.opts = opts;
  }

  Heap.prototype.init = function() {
    if (window.heap != null) {
      return;
    }
    window.heap = window.heap || [];
    window.heap.load = function(appid, config) {
      var heapMethods, i, len, method, methodFactory, results;
      window.heap.appid = appid;
      window.heap.config = config;
      methodFactory = function(type) {
        return function() {
          window.heap.push([type].concat(Array.prototype.slice.call(arguments, 0)));
        };
      };
      heapMethods = ['addEventProperties', 'addUserProperties', 'clearEventProperties', 'identify', 'removeEventProperty', 'setEventProperties', 'track', 'unsetEventProperty'];
      results = [];
      for (i = 0, len = heapMethods.length; i < len; i++) {
        method = heapMethods[i];
        results.push(window.heap[method] = methodFactory(method));
      }
      return results;
    };
    return window.heap.load(this.options.id);
  };

  Heap.prototype.track = function(event, props, cb) {
    window.heap.track(event, props);
    return cb(null);
  };

  Heap.prototype.identify = function(userId, props, cb) {
    window.identify(userId);
    return window.heap.addUserProperties(props);
  };

  return Heap;

})(Integration);

//# sourceMappingURL=heap.js.map
